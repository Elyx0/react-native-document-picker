{
  "name": "react-native-document-picker",
  "version": "2.1.0",
  "description": "A react native interface to access Documents from dropbox google drive, iCloud",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/Elyx0/react-native-document-picker.git"
  },
  "keywords": [
    "document",
    "picker",
    "uidocumentmenuviewcontroller",
    "react-native",
    "dropbox",
    "google-drive",
    "icloud"
  ],
  "license": "ISC",
  "main": "index.js",
  "name": "react-native-document-picker",
  "optionalDependencies": {},
  "readme": "# react-native-document-picker\r\n\r\nA React Native wrapper for Apple's ``UIDocumentMenuViewController`` and for Android's ``Intent.ACTION_OPEN_DOCUMENT`` / ``Intent.ACTION_PICK``.\r\n\r\n### Installation\r\n\r\n```bash\r\nnpm i --save react-native-document-picker\r\n```\r\n\r\n**Automatically Link Native Modules**\r\n\r\nFor 0.29.2+ projects, simply link native packages via the following command (note: rnpm has been merged into react-native)\r\n\r\n```\r\nreact-native link\r\n```\r\n\r\nAs for projects < 0.29 you need `rnpm` to link native packages\r\n\r\n```sh\r\nrnpm link\r\n```\r\n\r\n**Manually Link Native Modules**\r\n\r\n1. Run `npm install react-native-document-picker --save`\r\n2. Open your project in XCode, right click on `Libraries` and click `Add\r\n   Files to \"Your Project Name\"` [(Screenshot)](http://url.brentvatne.ca/jQp8) then [(Screenshot)](http://url.brentvatne.ca/1gqUD).\r\n3. Add `libRNDocumentPicker.a` to `Build Phases -> Link Binary With Libraries`\r\n   [(Screenshot)](http://url.brentvatne.ca/17Xfe).\r\n\r\n**CocoaPods**\r\n\r\nAdd the following to your podfile:\r\n```\r\npod 'react-native-document-picker', :path => '../node_modules/react-native-document-picker`\r\n```\r\n\r\n### Android\r\n\r\n```gradle\r\n// file: android/settings.gradle\r\n...\r\n\r\ninclude ':react-native-document-picker'\r\nproject(':react-native-document-picker').projectDir = new File(rootProject.projectDir, '../node_modules/react-native-document-picker/android')\r\n```\r\n\r\n```gradle\r\n// file: android/app/build.gradle\r\n...\r\n\r\ndependencies {\r\n    ...\r\n    compile project(':react-native-document-picker')\r\n}\r\n```\r\n\r\n```java\r\n// file: MainApplication.java\r\n...\r\n\r\nimport com.reactnativedocumentpicker.ReactNativeDocumentPicker;; // Import package\r\n\r\npublic class MainApplication extends Application implements ReactApplication {\r\n\r\n   /**\r\n   * A list of packages used by the app. If the app uses additional views\r\n   * or modules besides the default ones, add more packages here.\r\n   */\r\n    @Override\r\n    protected List<ReactPackage> getPackages() {\r\n      return Arrays.<ReactPackage>asList(\r\n          new MainReactPackage(),\r\n            new ReactNativeDocumentPicker() // Add package\r\n      );\r\n    }\r\n...\r\n}\r\n```\r\n\r\n## Example\r\n```javascript\r\nimport { DocumentPicker, DocumentPickerUtil } from 'react-native-document-picker';\r\n\r\n// iPhone/Android\r\nDocumentPicker.show({\r\n      filetype: [DocumentPickerUtil.images()],\r\n    },(error,res) => {\r\n      // Android\r\n      console.log(\r\n         res.uri,\r\n         res.type, // mime type\r\n         res.fileName,\r\n         res.fileSize\r\n      );\r\n    });\r\n\r\n// iPad\r\nconst {pageX, pageY} = event.nativeEvent;\r\n\r\nDocumentPicker.show({\r\n  top: pageY,\r\n  left: pageX,\r\n  filetype: ['public.image'],\r\n}, (error, url) => {\r\n  alert(url);\r\n});\r\n\r\n```\r\n\r\n### Note\r\nThe full list of UTI is available here:\r\n[(https://developer.apple.com/library/ios/documentation/Miscellaneous/Reference/UTIRef/Articles/System-DeclaredUniformTypeIdentifiers.html)](https://developer.apple.com/library/ios/documentation/Miscellaneous/Reference/UTIRef/Articles/System-DeclaredUniformTypeIdentifiers.html\r\n)]\r\n\r\n## Here is how it looks:\r\n![screenshot](http://i.stack.imgur.com/dv0iQ.png)\r\n\r\n\r\n## How to send it back ?\r\n\r\nI recommend using [https://github.com/johanneslumpe/react-native-fs](https://github.com/johanneslumpe/react-native-fs)\r\nI had to modify [Uploader.m](https://gist.github.com/Elyx0/5dc53bef294b42c847f1baea7cc5e911) so it would use `NSFileCoordinator` with `NSFileCoordinatorReadingForUploading` option.\r\n\r\nI added a check for file length that would be thrown into RNFS catch block.\r\n```obj-c\r\nif ([fileData length] == 0) {\r\n    NSError *errorUp = [NSError errorWithDomain:@\"com.whatever.yourapp\" code:77 userInfo:[NSDictionary dictionaryWithObject:@\"empty\" forKey:NSLocalizedDescriptionKey]];\r\n    _params.errorCallback(errorUp);\r\n    return;\r\n}\r\n```\r\n\r\n\r\n```javascript\r\nlet url = \"file://whatever/com.bla.bla/file.ext\"; //The url you received from the DocumentPicker\r\n\r\n// I STRONGLY RECOMMEND ADDING A SMALL SETTIMEOUT before uploading the url you just got.\r\nconst split = url.split('/');\r\nconst name = split.pop();\r\nconst inbox = split.pop();\r\nconst realPath = `${RNFS.TemporaryDirectoryPath}${inbox}/${name}`;\r\n\r\nconst uploadBegin = (response) => {\r\n  const jobId = response.jobId;\r\n  console.log('UPLOAD HAS BEGUN! JobId: ' + jobId);\r\n};\r\n\r\nconst uploadProgress = (response) => {\r\n  const percentage = Math.floor((response.totalBytesSent/response.totalBytesExpectedToSend) * 100);\r\n  console.log('UPLOAD IS ' + percentage + '% DONE!');\r\n};\r\n\r\nRNFS.uploadFiles({\r\n   toUrl: uploadUrl,\r\n   files: [{\r\n      name,\r\n      filename:name,\r\n      filepath: realPath,\r\n    }],\r\n   method: 'POST',\r\n   headers: {\r\n      'Accept': 'application/json',\r\n   },\r\n   begin: uploadBegin,\r\n   beginCallback: uploadBegin, // Don't ask me, only way I made it work as of 1.5.1\r\n   progressCallback: uploadProgress,\r\n   progress: uploadProgress\r\n   })\r\n   .then((response) => {\r\n     console.log(response,\"<<< Response\");\r\n     if (response.statusCode == 200) { //You might not be getting a statusCode at all. Check\r\n        console.log('FILES UPLOADED!');\r\n      } else {\r\n        console.log('SERVER ERROR');\r\n       }\r\n     })\r\n     .catch((err) => {\r\n       if (err.description) {\r\n         switch (err.description) {\r\n           case \"cancelled\":\r\n             console.log(\"Upload cancelled\");\r\n             break;\r\n           case \"empty\"\r\n             console.log(\"Empty file\");\r\n           default:\r\n            //Unknown\r\n         }\r\n       } else {\r\n        //Weird\r\n       }\r\n       console.log(err);\r\n    });\r\n```\r\n## File Type \r\n***All type of Files*** ``` 'public.allFiles' or DocumentPickerUtil.allFiles()```<br/> \r\n***Only PDF*** ``` 'public.pdf' or DocumentPickerUtil.pdf() ``` <br/> \r\n***Audio*** ``` 'public.audio' or DocumentPickerUtil.audio()``` <br/> \r\n***Plain Text*** ``` 'public.plainText' or DocumentPickerUtil.plainText() ``` <br/> \r\n\r\n## Reminder\r\n\r\nYou need to enable iCloud Documents to access iCloud\r\n![screen](https://313e5987718b346aaf83-f5e825270f29a84f7881423410384342.ssl.cf1.rackcdn.com/1411920674-enable-icloud-drive.png)\r\n\r\n\r\n## Halp wanted: Improvements\r\n\r\n- Fix Xcode warning about constraints\r\n- support options for the [UIDocumentMenuViewController](https://developer.apple.com/library/ios/documentation/FileManagement/Conceptual/DocumentPickerProgrammingGuide/AccessingDocuments/AccessingDocuments.html#//apple_ref/doc/uid/TP40014451-CH2-SW5)\r\n- Handle Upload by itself ?\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/Elyx0/react-native-document-picker.git"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "2.1.0"
}
